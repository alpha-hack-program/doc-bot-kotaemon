# Lite version
FROM python:3.10-slim AS lite

# ---------------------------------------------------------------------------

# Common dependencies
RUN apt-get update -qqy && \
    apt-get install -y --no-install-recommends \
      ssh \
      git \
      gcc \
      g++ \
      poppler-utils \
      libpoppler-dev \
      unzip \
      curl \
      cargo

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV PYTHONIOENCODING=UTF-8

# Create working directory
WORKDIR /app

# Adjust permissions for OpenShift's random user ID
RUN mkdir -p /app/libs && \
    mkdir -p /app/scripts && \
    chmod -R g+rwX /app && \
    chown -R 1001:0 /app

# Download pdfjs
COPY scripts/download_pdfjs.sh /app/scripts/download_pdfjs.sh
RUN chmod +x /app/scripts/download_pdfjs.sh
ENV PDFJS_PREBUILT_DIR="/app/libs/ktem/ktem/assets/prebuilt/pdfjs-dist"
# RUN bash scripts/download_pdfjs.sh $PDFJS_PREBUILT_DIR

# Copy contents
COPY . /app

# Adjust permissions after copying files
RUN chmod -R g+rwX /app && chown -R 1001:0 /app

# Install pip packages
RUN --mount=type=ssh  \
    --mount=type=cache,target=/root/.cache/pip  \
    pip install -e "libs/kotaemon" \
    && pip install -e "libs/ktem" \
    && pip install graphrag future \
    && pip install "pdfservices-sdk@git+https://github.com/niallcm/pdfservices-python-sdk.git@bump-and-unfreeze-requirements" \
    && pip install kubernetes

# Clean up
RUN apt-get autoremove \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf ~/.cache

# Set permissions for Python packages installed in /usr/local/lib
RUN chmod -R g+rwX /usr/local/lib/python3.10/site-packages/

CMD ["python", "app.py"]

# Full version
FROM lite AS full

# Additional dependencies for full version
RUN apt-get update -qqy && \
    apt-get install -y --no-install-recommends \
      tesseract-ocr \
      tesseract-ocr-jpn \
      libsm6 \
      libxext6 \
      libreoffice \
      ffmpeg \
      libmagic-dev

# Install torch and torchvision for unstructured
RUN --mount=type=ssh  \
    --mount=type=cache,target=/root/.cache/pip  \
    pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu

# Copy contents
#COPY . /app

# Create required directories and set environment variables
RUN mkdir -p /app/nltk_data && chmod -R g+rwX /app/nltk_data
ENV NLTK_DATA=/app/nltk_data

RUN mkdir -p /app/matplotlib && chmod -R g+rwX /app/matplotlib
ENV MPLCONFIGDIR=/app/matplotlib

RUN mkdir -p /app/fontconfig && chmod -R g+rwX /app/fontconfig
ENV XDG_CACHE_HOME=/app/fontconfig

# Install additional pip packages
RUN --mount=type=ssh  \
    --mount=type=cache,target=/root/.cache/pip  \
    pip install -e "libs/kotaemon[adv]" \
    && pip install unstructured[all-docs] \
    && pip install kubernetes

# Clean up
RUN apt-get autoremove \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf ~/.cache

# Download nltk packages as required for unstructured
# RUN python -c "from unstructured.nlp.tokenize import _download_nltk_packages_if_not_present; _download_nltk_packages_if_not_present()"
RUN python -m nltk.downloader averaged_perceptron_tagger_eng punkt_tab

# Install required packages (ca-certificates) for SSL/TLS
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Copy the custom certificate to the Python 3 certifi directory
COPY ./certificates/cacert.pem /usr/local/lib/python3.10/site-packages/certifi/cacert.pem

# Set permissions for the certificates
RUN chmod 644 /usr/local/lib/python3.10/site-packages/certifi/cacert.pem

# Set the REQUESTS_CA_BUNDLE environment variable globally
ENV REQUESTS_CA_BUNDLE=/usr/local/lib/python3.10/site-packages/certifi/cacert.pem
ENV SSL_CERT_FILE=/usr/local/lib/python3.10/site-packages/certifi/cacert.pem

RUN update-ca-certificates
RUN apt-get update && apt-get install -y ca-certificates

# ---------------------------------------------    start of ollama script
# Install Tini for process management
#RUN apt-get update && apt-get install -y tini


# Create /.ollama directory and adjust permissions
#RUN mkdir -p /.ollama && chmod -R 777 /.ollama
#RUN chown -R 1001:0 /.ollama && chmod -R g+rwX /.ollama 

# Install Ollama properly
#RUN apt-get update && apt-get install -y curl && \
#    curl -o /usr/local/bin/ollama https://ollama.com/install.sh && \
#    chmod +x /usr/local/bin/ollama && \
#    /usr/local/bin/ollama --version



# Create a startup script to install ollama and run in background
#RUN echo '#!/bin/bash\n\
#ollama serve &\n\
#sleep 10\n\
#ollama pull nomic-embed-text\n\
#python app.py' > /usr/local/bin/startup.sh && \
#    chmod +x /usr/local/bin/startup.sh


# Expose port for Ollama
EXPOSE 5000 11434 

# Set the entrypoint using Tini for process supervision
#ENTRYPOINT ["/usr/bin/tini", "--"] 

# Set the working directory permissions to allow any assigned user
RUN chown -R 1001:0 /app && chmod -R g+rwX /app 

# Run the startup script
#CMD ["/usr/local/bin/startup.sh"]
# ---------------------------------------------    end of ollama script

# run the gradio app, this is instead of using the ollama script, with this there is no ollama
CMD ["python", "app.py"]
